!function(t){var e={};function i(s){if(e[s])return e[s].exports;var o=e[s]={i:s,l:!1,exports:{}};return t[s].call(o.exports,o,o.exports,i),o.l=!0,o.exports}i.m=t,i.c=e,i.d=function(t,e,s){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:s})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var s=Object.create(null);if(i.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)i.d(s,o,function(e){return t[e]}.bind(null,o));return s},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="",i(i.s=0)}([function(t,e,i){"use strict";i.r(e);const s=32,o=1024,h="HORIZONTAL",l={BACKGROUND:"#000000",DARK_BLUE:"#1c92d2",LIGHT_BLUE:"#54EFEA",RED:"#FF1234",WHITE:"#FFFFFF",PURPLE:"#FF00FF"},a="Orbitron",n={LOADING:0,TITLE:1,PLAYING:2,PAUSED:3,GAME_OVER:4,WIN:5},r=60,c=r/4,d=1.5,p={N:[0,-1],NE:[1,-1],E:[1,0],SE:[1,1],S:[0,1],SW:[-1,1],W:[-1,0],NW:[-1,-1],STATIONARY:[0,0]},g={ENTER:13,P:80,UP:38,W:87,LEFT:37,A:65,DOWN:40,S:83,RIGHT:39,D:68,SPACE:32,Q:81},y={BACKGROUND:null,PLAYER:{up:[],down:[],left:[],right:[]},ENEMIES:{ROBOT:{up:[],down:[],left:[],right:[]},SLIME:{up:[],down:[],left:[],right:[]},KNIGHT:{up:[],down:[],left:[],right:[]}},EXPLOSION:[]},u=t=>{let e=0,i=0;{i+=1;let t=new Image;t.onload=s,t.src="images/background-pattern.png",y.BACKGROUND=t}["up","down","left","right"].forEach(t=>{for(let e=1;e<=3;++e){i+=1;let o=new Image;o.onload=s,o.src=`images/sprite/${t}_${e}.png`,y.PLAYER[t].push(o)}for(let e=1;e<=4;++e){i+=3;let o=new Image;o.onload=s,o.src=`images/enemies/robot_${t}_${e}.png`,y.ENEMIES.ROBOT[t].push(o),(o=new Image).onload=s,o.src=`images/enemies/slime_${t}_${e}.png`,y.ENEMIES.SLIME[t].push(o),(o=new Image).onload=s,o.src=`images/enemies/knight_${t}_${e}.png`,y.ENEMIES.KNIGHT[t].push(o)}});for(let t=0;t<12;++t){i+=1;let e=new Image;e.onload=s,e.src=`images/explosion/explosion_${t}.png`,y.EXPLOSION.push(e)}function s(){++e>=i&&t()}},m=(t,e)=>[t[0]*e,t[1]*e],f=(t,e)=>{const[i,s]=t.position,[o,h]=e.position,[l,a]=[i+t.width,s+t.height],[n,r]=[o+e.width,h+e.height];return i+t.grace[0][0]<=n-e.grace[0][1]&&l-t.grace[0][1]>=o+e.grace[0][0]&&s+t.grace[1][0]<=r-e.grace[1][1]&&a-t.grace[1][1]>=h+e.grace[1][0]},E=t=>!(t.position[0]+t.grace[0][0]<10||t.position[0]+t.width-t.grace[0][1]>1270||t.position[1]+t.grace[1][0]<10||t.position[1]+t.height-t.grace[1][1]>710),P=([t,e,i,s],[o,h,l,a])=>{const[n,r]=[t+i,e+s],[c,d]=[o+l,h+a];return t<=c&&n>=o&&e<=d&&r>=h},w=t=>{const e=1e4*Math.sin(t);return e-Math.floor(e)},b=t=>{const e=[0,0];return t[g.UP]&&(e[1]-=1),t[g.DOWN]&&(e[1]+=1),t[g.LEFT]&&(e[0]-=1),t[g.RIGHT]&&(e[0]+=1),e},T=t=>{const e=[0,0];return t[g.W]&&(e[1]-=1),t[g.S]&&(e[1]+=1),t[g.A]&&(e[0]-=1),t[g.D]&&(e[0]+=1),e},v=t=>{t[g.UP]=!1,t[g.LEFT]=!1,t[g.RIGHT]=!1,t[g.DOWN]=!1,t[g.W]=!1,t[g.A]=!1,t[g.S]=!1,t[g.D]=!1};class I{constructor(t){this.position=t.position||[0,0],this.velocity=t.velocity||p.STATIONARY.slice(),this.facing=t.facing||p.S.slice(),this.width=t.width||10,this.height=t.height||10,this.color=t.color||l.LIGHT_BLUE,this.collidable=void 0===t.collidable||t.collidable,this.moveSpeed=t.moveSpeed||d,this.killable=!1,this.deadly=!1,this.dead=!1,this.hp=t.hp||0,this.maxHp=t.hp||0,this.damage=t.damage||0,this.grace=t.grace||[[0,0],[0,0]]}update(t){}setHP(t){this.hp=t,t<0&&(this.dead=!0)}draw(t,e){t.beginPath(),t.moveTo(...this.position),t.fillStyle=this.color,t.shadowColor=this.color,t.shadowBlur=5+2*(Math.sin(2*e/r)+1),t.fillRect(...this.position,this.width,this.height),t.closePath()}drawHp(t){if(!this.hp||this.dead)return;const[e,i,s,o]=this.getHitbox();t.beginPath(),t.lineWidth=2,t.strokeStyle="#00ff00",t.shadowBlur=0,t.moveTo(e,i-7),t.lineTo(e+s*this.hp/this.maxHp,i-7),t.stroke(),t.closePath()}drawImage(t,e){t.beginPath(),t.moveTo(...this.position),t.shadowBlur=0,t.drawImage(e,...this.position,this.width,this.height),t.closePath()}imageDirection(){switch(this.facing.join(",")){case p.N.join(","):return"up";case p.E.join(","):return"right";case p.W.join(","):return"left";case p.S.join(","):default:return"down"}}nextPosition(t){const e=m(m(this.velocity,t),this.moveSpeed);return[this.position[0]+e[0],this.position[1]+e[1]]}nextPositionAsObject(t){return{position:this.nextPosition(t),width:this.width,height:this.height,collidable:this.collidable,killable:this.killable,grace:this.grace,hp:this.hp}}setFacing(t){t.join(",")===p.STATIONARY.join(",")||(t.join(",")===p.N.join(",")||t.join(",")===p.W.join(",")||t.join(",")===p.E.join(",")||t.join(",")===p.S.join(",")?this.facing=t.slice():t.join(",")===p.NW.join(",")?this.facing=p.N:t.join(",")===p.NE.join(",")?this.facing=p.N:t.join(",")===p.SW.join(",")?this.facing=p.W:t.join(",")===p.SE.join(",")?this.facing=p.E:this.facing=p.S)}moveToNextPosition(t){this.setFacing(this.velocity),this.position=this.nextPosition(t)}nextXPosition(t){const e=m(m(this.velocity,t),this.moveSpeed);return[this.position[0]+e[0],this.position[1]]}nextXPositionAsObject(t){return{position:this.nextXPosition(t),width:this.width,height:this.height,collidable:this.collidable,killable:this.killable,grace:this.grace,hp:this.hp}}moveToNextXPosition(t){this.setFacing(this.velocity),this.position=this.nextXPosition(t)}nextYPosition(t){const e=m(m(this.velocity,t),this.moveSpeed);return[this.position[0],this.position[1]+e[1]]}nextYPositionAsObject(t){return{position:this.nextYPosition(t),width:this.width,height:this.height,collidable:this.collidable,killable:this.killable,grace:this.grace,hp:this.hp}}moveToNextYPosition(t){this.setFacing(this.velocity),this.position=this.nextYPosition(t)}addVelocity(t){this.velocity[0]+=t[0],this.velocity[1]+=t[1]}removeVelocity(t){this.velocity[0]-=t[0],this.velocity[1]-=t[1]}setVelocity(t){this.velocity[0]=t[0],this.velocity[1]=t[1]}getHitbox(){return[this.position[0]+this.grace[0][0],this.position[1]+this.grace[1][0],this.width-this.grace[0][1]-this.grace[0][0],this.height-this.grace[1][1]-this.grace[1][0]]}getHitboxAt(t){return[t[0]+this.grace[0][0],t[1]+this.grace[1][0],this.width-this.grace[0][1]-this.grace[0][0],this.height-this.grace[1][1]-this.grace[1][0]]}}class x extends I{constructor(t){t.color=t.color||l.RED,super(t),this.deadly=!0,this.damage=t.damage||1}}class S extends x{constructor(t){t.damage=t.damage||10,t.color=t.color||l.BULLET,t.collidable=t.collidable||!1,t.moveSpeed=t.moveSpeed||10,super(t),this.height=this.width}draw(t){t.beginPath(),t.shadowColor=this.color,t.shadowBlur=10,t.strokeStyle=l.WHITE,t.lineWidth=this.width,t.lineCap="round";const e=m(this.velocity,this.moveSpeed),i=this.position[0]-e[0],s=this.position[1]-e[1];t.moveTo(...this.position),t.lineTo(i,s),t.stroke(),t.closePath(),t.lineCap="butt"}getHitbox(){return[this.position[0]+this.grace[0][0],this.position[1]+this.grace[1][0],2*this.width-this.grace[0][1]-this.grace[0][0],2*this.height-this.grace[1][1]-this.grace[1][0]]}}class A extends I{constructor(t){super(t),this.collidable=t.collidable||!1,this.deadly=t.deadly||!1,this.dead=!1,this.hp=0,this.maxHp=0,this.damage=t.damage||0,this.startFrame=void 0,this.duration=t.duration||c/4,this.velocity=p.STATIONARY.slice(),this.image=t.image||y.EXPLOSION}draw(t,e){void 0===this.startFrame&&(this.startFrame=e);const i=e-this.startFrame,s=Math.floor(i/this.duration);if(s>=this.image.length)return void(this.dead=!0);const o=this.image[s];super.drawImage(t,o)}}class L extends I{constructor(t){t.hp=t.hp||1,super(t),this.images=y.PLAYER,this.killable=!0,this.bulletRate=r/6,this.bulletDelay=0}canFireBullet(){return this.bulletDelay<=0}setBulletDelay(){this.bulletDelay=this.bulletRate}updateBulletDelay(t){this.bulletDelay=Math.max(0,this.bulletDelay-t)}draw(t,e){const i=super.imageDirection();let s;switch(Math.floor(e/c)%4){case 0:s=0;break;case 1:s=1;break;case 2:s=2;break;case 3:s=1;break;default:s=0}this.velocity.join(",")===p.STATIONARY.join(",")&&(s=1);const o=this.images[i][s];super.drawImage(t,o)}die(){this.dead=!0,this.velocity=[0,0]}}class N extends x{constructor(t){t.hp=t.hp||1,super(t),this.image=t.image||y.ENEMIES.ROBOT,this.killable=!0,this.damage=1,this.moveSpeed=t.moveSpeed||this.moveSpeed/2}draw(t,e){const i=super.imageDirection(),s=Math.floor(e/c)%4,o=this.image[i][s];super.drawImage(t,o)}die(){this.velocity=[0,0],this.dead=!0}moveToward(t,e,i){const[s,o,h,l]=this.getHitbox(),[a,n,r,c]=t.getHitbox();this.velocity[0]=a+r/2<=s+h&&a+r/2>=s?0:s<a+r/2?1:-1,this.velocity[1]=n+c/2<=o+l&&n+c/2>=o?0:o<n+c/2?1:-1}}class D extends x{constructor(t){t.color=t.color||l.RED,super(t),this.orientation=t.orientation||h,this.totalDelta=void 0,this.duration=t.duration||16*c,this.parity=t.parity||0,this.deadly=0===this.parity}update(t){void 0===this.totalDelta?this.totalDelta=0:this.totalDelta+=t,this.deadly=0===this.parity==this.totalDelta%this.duration<this.duration/2}draw(t,e){let i,s,o,a;this.deadly&&super.draw(t,e),this.orientation===h?(i=this.position[0],o=this.position[0]+this.width,a=s=this.position[1]+this.height/2):(o=i=this.position[0]+this.width/2,s=this.position[1],a=this.position[1]+this.height),t.beginPath(),t.shadowBlur=0,t.fillStyle=l.PURPLE,t.moveTo(i,s),t.arc(i,s,3,0,2*Math.PI),t.moveTo(o,a),t.arc(o,a,3,0,2*Math.PI),t.fill(),t.closePath()}}class O extends N{constructor(t){super(t),this.previousAIDelta=-1,this.totalAIDelta=void 0}moveToward(t,e,i){void 0===this.totalAIDelta?this.totalAIDelta=0:this.totalAIDelta+=i;const s=[p.N.slice(),p.NE.slice(),p.NW.slice(),p.S.slice(),p.SE.slice(),p.SW.slice(),p.E.slice(),p.W.slice()],o=Math.floor(this.totalAIDelta/(8*c));if(o>this.previousAIDelta){this.previousAIDelta=o;const t=Math.min(Math.floor(w(i*this.position[0]*this.position[1])*s.length),s.length);this.velocity=s[t]}}}class k extends N{constructor(t){super(t),this.aiFrequency=c,this.aiLimit=o,this.velocities=[m(p.N,this.moveSpeed*s),m(p.S,this.moveSpeed*s),m(p.E,this.moveSpeed*s),m(p.W,this.moveSpeed*s),m(p.NE,this.moveSpeed*s),m(p.NW,this.moveSpeed*s),m(p.SE,this.moveSpeed*s),m(p.SW,this.moveSpeed*s)],this.previousAIDelta=-1}moveToward(t,e,i){void 0===this.totalAIDelta?this.totalAIDelta=0:this.totalAIDelta+=i;const s=Math.floor(this.totalAIDelta/this.aiFrequency);if(s>this.previousAIDelta){this.previousAIDelta=s;const o=this.getShortestPath(this,t,e);o?(o[0]<this.position[0]?this.velocity[0]=-1:o[0]>this.position[0]?this.velocity[0]=1:this.velocity[0]=0,o[1]<this.position[1]?this.velocity[1]=-1:o[1]>this.position[1]?this.velocity[1]=1:this.velocity[1]=0):super.moveToward(t,e,i)}}getShortestPath(t,e,i){const s=[t.position.slice()],o={},h={};let l=0;for(;s.length>0&&l<this.aiLimit;){const a=s.shift();if(++l,h[a.join(",")]=!0,P(e.getHitbox(),this.getHitboxAt(a))){if(a.join(",")===t.position.join(","))return a;let e=a;for(;o[e.join(",")].join(",")!==t.position.join(",");)e=o[e.join(",")];return e}this.getNeighborsForPosition(a).forEach(t=>{const e=this.getHitboxAt(t);if(void 0===h[t.join(",")]){let l=!1,n=0;for(let t=0;!l&&t<i.length;++t)i[t]!==this&&(n++,l=P(e,i[t].getHitbox())&&i[t].collidable);l||(h[t.join(",")]=a.join(","),s.push(t),o[t.join(",")]=a)}})}}getNeighborsForPosition(t){const e=[];return this.velocities.forEach(i=>{e.push([t[0]+i[0],t[1]+i[1]])}),e}}const R=()=>new L({position:[630,350],velocity:p.STATIONARY.slice(),facing:p.S,width:21,height:34.5,grace:[[3,3],[3,3]],hp:100,moveSpeed:1.2*d}),B=({position:t,width:e})=>new I({position:t,width:e,height:3,velocity:[0,0]}),H=({position:t,height:e})=>new I({position:t,height:e,velocity:[0,0],width:3}),G=({position:t,width:e})=>new x({position:t,width:e,velocity:[0,0],height:3,grace:[[0,0],[3,3]],collidable:!1}),j=({position:t,height:e,parity:i=0})=>new D({position:t,parity:i,height:e,width:3,orientation:"VERTICAL",velocity:[0,0],grace:[[3,3],[0,0]],collidable:!1}),U=()=>[H({position:[570,197],height:111}),H({position:[700,197],height:111}),B({position:[424,308],width:149}),B({position:[424,458],width:426}),B({position:[700,308],width:148})],M=()=>[H({position:[570,197],height:111}),H({position:[700,197],height:111}),B({position:[424,308],width:149}),B({position:[424,458],width:426}),B({position:[700,308],width:148}),j({position:[424,308],height:153}),j({position:[849,308],height:153,parity:1}),G({position:[570,197],width:130})],_=t=>new N({position:t,velocity:[0,0],width:48,height:48,grace:[[3,3],[3,0]],hp:70,image:y.ENEMIES.ROBOT,moveSpeed:.7*d}),C=t=>new N({position:t,velocity:[0,0],width:64,height:64,grace:[[5,5],[5,0]],hp:150,image:y.ENEMIES.ROBOT,moveSpeed:.5*d}),W=t=>new N({position:t,velocity:[0,0],width:32,height:32,grace:[[2,2],[2,0]],hp:20,image:y.ENEMIES.ROBOT,moveSpeed:1.2*d}),F=t=>new O({position:t,velocity:[0,0],width:36,height:42,grace:[[5,5],[6,2]],hp:20,image:y.ENEMIES.SLIME,moveSpeed:.6*d}),Y=t=>new O({position:t,velocity:[0,0],width:72,height:84,grace:[[10,10],[3,1]],hp:200,image:y.ENEMIES.SLIME,moveSpeed:.3*d}),K=t=>new k({position:t,velocity:[0,0],width:30,height:42,grace:[[6,6],[3,2]],hp:80,image:y.ENEMIES.KNIGHT,moveSpeed:1.1*d}),V=()=>[{player:R(),obstacles:U(),enemies:[_([100,100]),_([1100,100]),_([100,600]),_([1100,600])]},{player:R(),obstacles:U(),enemies:[K([100,100]),K([1100,100]),K([100,600]),K([1100,600])]},{player:R(),obstacles:M(),enemies:[C([100,100]),C([1100,100]),C([100,600]),C([1100,600])]},{player:R(),obstacles:U(),enemies:[F([100,100]),F([500,100]),F([900,100]),F([300,600]),F([700,600]),Y([300,550]),Y([900,150]),F([100,200]),F([100,400]),F([1100,200]),F([1100,400])]},{player:R(),obstacles:M(),enemies:[W([200,100]),W([400,100]),W([600,100]),W([800,100]),W([1e3,100]),W([200,600]),W([400,600]),W([600,600]),W([800,600]),W([1e3,600]),W([200,200]),W([200,400]),W([1e3,200]),W([1e3,400])]},{player:R(),obstacles:U(),enemies:[F([100,100]),F([300,100]),F([500,100]),F([700,100]),F([900,100]),F([100,600]),F([300,600]),F([500,600]),F([700,600]),F([900,600]),Y([300,550]),Y([900,550]),Y([300,150]),Y([900,150]),F([100,200]),F([100,300]),F([100,400]),F([100,500]),F([1100,200]),F([1100,300]),F([1100,400]),F([1100,500]),K([100,100]),K([1100,100]),K([100,600]),K([1100,600])]}],X=V().length,$=t=>V()[t];class q{constructor(t){const e=$(t);this.player=e.player,this.obstacles=e.obstacles,this.enemies=e.enemies,this.bullets=[],this.explosions=[]}update(t,e){this.obstacles.forEach(e=>e.update(t)),this.updatePlayer(t,e),this.shoot(t,e),this.bullets.forEach(e=>this.updateBullet(t,e)),this.allObstacles=this.obstacles.concat(this.enemies),this.enemies.forEach((e,i)=>this.updateEnemy(t,e,i)),this.purgeDeadObjects()}shoot(t,e){if(this.player.canFireBullet()){const t=T(e),[i,s,o,h]=this.player.getHitbox();if(t.join(",")!==p.STATIONARY.join(",")){let[e,l]=[0,0];e=-1===t[0]?i-1:1===t[0]?i+o:1+i+o/2,l=-1===t[1]?s-1:1===t[1]?s+h:1+s+h/2,this.bullets.push(new S({position:[e,l],velocity:t,width:4})),this.player.setBulletDelay()}}}purgeDeadObjects(){this.enemies=this.enemies.filter(t=>!t.dead),this.bullets=this.bullets.filter(t=>!t.dead),this.explosions=this.explosions.filter(t=>!t.dead)}killEnemy(t){const[e,i,s,o]=t.getHitbox();this.explosions.push(new A({position:[e,i],width:s,height:o})),t.die()}updateBullet(t,e){const i=e.nextPositionAsObject(t);E(i)?(this.obstacles.forEach(t=>{t.collidable&&f(i,t)&&(e.dead=!0,e.damage=0,e.deadly=!1)}),e.dead||e.moveToNextPosition(t)):e.dead=!0}updateEnemy(t,e,i){e.moveToward(this.player,this.allObstacles,t);const s=e.nextPositionAsObject(t);if(this.checkCollisions(s,i))if(s.dead)this.killEnemy(e),e.position=s.position;else if(0!==e.velocity[0]&&0!==e.velocity[1]){const s=e.nextXPositionAsObject(t);if(this.checkCollisions(s,i))if(s.dead)this.killEnemy(e),e.position=s.position;else{const s=e.nextYPositionAsObject(t);this.checkCollisions(s,i)||(e.setHP(s.hp),e.moveToNextYPosition(t)),s.dead?(this.killEnemy(e),e.position=s.position):e.setHP(s.hp)}else e.setHP(s.hp),e.moveToNextXPosition(t),s.dead&&this.killEnemy(e)}else e.setHP(s.hp);else e.setHP(s.hp),e.moveToNextPosition(t),s.dead&&this.killEnemy(e);e.hp<=0&&this.killEnemy(e)}killPlayer(t){this.player.die(),v(t)}updatePlayer(t,e){this.player.updateBulletDelay(t),this.player.setVelocity(b(e));const i=this.player.nextPositionAsObject(t);if(this.checkCollisions(i))if(i.hp<=0)this.killPlayer(e),this.player.position=i.position;else if(0!==this.player.velocity[0]&&0!==this.player.velocity[1]){const i=this.player.nextXPositionAsObject(t);if(this.checkCollisions(i))if(i.hp<=0)this.killPlayer(e),this.player.position=i.position;else{const i=this.player.nextYPositionAsObject(t);this.checkCollisions(i)?i.hp<=0?(this.killPlayer(e),this.player.position=i.position):(this.player.setHP(i.hp),this.stopPlayer(e)):(this.player.setHP(i.hp),this.player.moveToNextYPosition(t))}else this.player.setHP(i.hp),this.player.moveToNextXPosition(t)}else this.player.setHP(i.hp),this.stopPlayer(e);else this.player.setHP(i.hp),this.player.moveToNextPosition(t)}stopPlayer(t){this.setPlayerVelocity(p.STATIONARY.slice())}checkCollisions(t,e=!1){let i=!1;return E(t)||(i=!0),this.obstacles.forEach(e=>{f(e,t)&&(e.deadly&&t.killable&&(t.hp-=e.damage),i=i||e.collidable)}),!1===e&&this.enemies.forEach((s,o)=>{e!==o&&f(s,t)&&(s.deadly&&t.killable&&(t.hp-=s.damage),i=i||s.collidable)}),t.killable&&!1!==e&&this.bullets.forEach(e=>{f(e,t)&&e.deadly&&(t.hp-=e.damage,e.dead=!0)}),i}draw(t,e){this.obstacles.forEach(i=>i.draw(t,e)),this.player.draw(t,e),this.enemies.forEach(i=>i.draw(t,e)),this.bullets.forEach(i=>i.draw(t,e)),this.explosions.forEach(i=>i.draw(t,e)),this.player.drawHp(t),this.enemies.forEach(e=>e.drawHp(t))}addPlayerVelocity(t){this.player.addVelocity(t)}removePlayerVelocity(t){this.player.removeVelocity(t)}setPlayerVelocity(t){this.player.setVelocity(t)}}const Q=t=>{t.clearRect(0,0,1280,720),t.fillStyle=l.BACKGROUND,t.fillRect(0,0,1280,720)},Z=(t,e,i,s,o,h,l=1)=>{t.beginPath();const a=e%i/i,n=a<.5?0:2*h*(a-.5),r=a>.5?0:h-2*h*a;t.lineWidth=l,t.moveTo(s+n,o),t.lineTo(s+h-r,o),t.stroke(),t.closePath()},z=t=>{t.clearRect(0,0,10,720),t.clearRect(0,0,1280,10),t.clearRect(1270,0,10,720),t.clearRect(0,710,1280,10),t.fillStyle=l.BACKGROUND,t.shadowColor=l.LIGHT_BLUE,t.shadowBlur=0,t.fillRect(0,0,10,720),t.fillRect(0,0,1280,10),t.fillRect(1270,0,10,720),t.fillRect(0,710,1280,10)},J=(t,e)=>{const i=parseInt(t.slice(1,3),16),s=parseInt(t.slice(3,5),16),o=parseInt(t.slice(5,7),16);return e?"rgba("+i+", "+s+", "+o+", "+e+")":"rgb("+i+", "+s+", "+o+")"},tt=(t,e)=>{Q(t),et(t),it(t,e)},et=t=>{t.beginPath(),t.fillStyle=l.LIGHT_BLUE,t.textAlign="center",t.shadowColor=l.LIGHT_BLUE,t.shadowBlur=10,t.font="50px "+a,t.fillText("AURA",640,60),t.closePath()},it=(t,e)=>{t.beginPath(),t.strokeStyle=l.LIGHT_BLUE,t.fillStyle=l.LIGHT_BLUE,t.textAlign="center",t.font="30px "+a;const i="Press ENTER to begin";t.shadowColor=l.LIGHT_BLUE,t.shadowBlur=10,t.fillText(i,640,200),t.closePath();const s=t.measureText(i).width,o=640-s/2;Z(t,e,2*r,o,210,s),Z(t,e,2*r,o,170,s),t.beginPath(),t.textAlign="left",t.fillText("Controls:",o,300),t.font="20px "+a,t.fillText("- Arrows to MOVE",o+20,340),t.fillText("- WASD to SHOOT",o+20,370),t.fillText("- P to PAUSE",o+20,400),t.font="30px "+a,t.fillText("Rules:",o,460),t.font="20px "+a,t.fillText("- Kill all the things",o+20,500),t.fillText("- Don't get hit",o+20,530),t.fillText("- Don't get touch the lasers",o+20,560),t.closePath()},st=(t,e,i)=>{Q(t),(t=>{t.shadowColor=l.LIGHT_BLUE,t.shadowBlur=0;for(let e=0;400*e<=1280;e++)for(let i=0;400*i<=720;i++)t.drawImage(y.BACKGROUND,400*e,400*i,400,400);z(t)})(t),ht(t,e),ot(t,e,i)},ot=(t,e,i)=>{i.draw(t,e)},ht=(t,e)=>{t.shadowColor=l.LIGHT_BLUE,t.shadowBlur=5+2*(Math.sin(2*e/r)+1),t.beginPath(),t.moveTo(10,10),t.lineTo(1270,10),t.strokeStyle=l.LIGHT_BLUE,t.lineWidth=5,t.stroke(),t.closePath(),t.beginPath(),t.moveTo(1270,10),t.lineTo(1270,710),t.strokeStyle=l.LIGHT_BLUE,t.lineWidth=5,t.stroke(),t.closePath(),t.beginPath(),t.moveTo(1270,710),t.lineTo(10,710),t.strokeStyle=l.LIGHT_BLUE,t.lineWidth=5,t.stroke(),t.closePath(),t.beginPath(),t.moveTo(10,710),t.lineTo(10,10),t.strokeStyle=l.LIGHT_BLUE,t.lineWidth=5,t.stroke(),t.closePath(),t.shadowBlur=0,t.beginPath(),t.moveTo(10,10),t.fillStyle=l.LIGHT_BLUE,t.arc(10,10,10,0,2*Math.PI),t.fill(),t.closePath(),t.beginPath(),t.fillStyle=l.LIGHT_BLUE,t.arc(1270,10,10,0,2*Math.PI),t.fill(),t.closePath(),t.beginPath(),t.fillStyle=l.LIGHT_BLUE,t.arc(1270,710,10,0,2*Math.PI),t.fill(),t.closePath(),t.beginPath(),t.fillStyle=l.LIGHT_BLUE,t.arc(10,710,10,0,2*Math.PI),t.fill(),t.closePath()},lt=(t,e)=>{at(t,e)},at=(t,e)=>{t.shadowColor=l.LIGHT_BLUE,t.beginPath(),t.strokeStyle=l.LIGHT_BLUE,t.textAlign="center",t.font="50px "+a;const i=t.measureText("PAUSED").width,s=640-i/2;t.shadowBlur=0,t.fillStyle=J(l.BACKGROUND,.7),t.fillRect(13,310,1254,65),t.shadowBlur=5+2*(Math.sin(2*e/r)+1),t.fillStyle=l.LIGHT_BLUE,t.fillText("PAUSED",640,360),t.closePath(),Z(t,e,2*r,s,367,i,2),Z(t,e,2*r,s,318,i,2)},nt=(t,e)=>{Q(t),rt(t,e)},rt=(t,e)=>{t.beginPath(),t.strokeStyle=l.LIGHT_BLUE,t.fillStyle=l.LIGHT_BLUE,t.textAlign="center",t.font="30px "+a;t.fillText("LOADING...",640,200),t.closePath();const i=t.measureText("LOADING...").width,s=640-i/2;Z(t,e,2*r,s,210,i),Z(t,e,2*r,s,170,i)},ct=(t,e)=>{dt(t,e),pt(t,e),gt(t)},dt=(t,e)=>{let i=w(Math.floor(e/(3.75*c)));t.shadowBlur=0,t.beginPath();for(let e=0;50*e<1280;e++)for(let s=0;50*s<720;s++){i=w(i);const o=.01+.3*w(i);t.fillStyle=J(l.RED,o),t.fillRect(50*e,50*s,50,50)}t.closePath()},pt=(t,e)=>{t.beginPath(),t.fillStyle=J(l.BACKGROUND,.7),t.fillRect(0,150,1280,190),t.strokeStyle=l.RED,t.fillStyle=l.RED,t.textAlign="center",t.font="60px "+a,t.shadowColor=l.RED,t.shadowBlur=5+2*(Math.sin(2*e/r)+1);t.fillText("YOU DIED",640,220),t.closePath();const i=t.measureText("YOU DIED").width,s=640-i/2;Z(t,e,2*r,s+i,172,-i),Z(t,e,2*r,s,226,i)},gt=t=>{t.beginPath(),t.font="30px "+a,t.fillText("Press ENTER to restart",640,320),t.closePath()},yt=(t,e,i=!0,s)=>{ut(t,e),mt(t,e,i),i?ft(t):Et(t,s)},ut=(t,e)=>{let i=w(Math.floor(e/(3.75*c)));t.shadowBlur=0,t.beginPath();for(let e=0;50*e<1280;e++)for(let s=0;50*s<720;s++){i=w(i);const o=.01+.3*w(i);t.fillStyle=J(l.LIGHT_BLUE,o),t.fillRect(50*e,50*s,50,50)}t.closePath()},mt=(t,e,i)=>{const s=i?190:250;t.beginPath(),t.fillStyle=J(l.BACKGROUND,.7),t.fillRect(0,150,1280,s),t.strokeStyle=l.LIGHT_BLUE,t.fillStyle=l.LIGHT_BLUE,t.textAlign="center",t.font="60px "+a,t.shadowColor=l.LIGHT_BLUE,t.shadowBlur=5+2*(Math.sin(2*e/r)+1);t.fillText("YOU WIN",640,220),t.closePath();const o=t.measureText("YOU WIN").width,h=640-o/2;Z(t,e,2*r,h+o,172,-o),Z(t,e,2*r,h,226,o)},ft=t=>{t.beginPath(),t.font="30px "+a,t.fillText("Press ENTER to start the next level",640,320),t.closePath()},Et=t=>{t.beginPath(),t.font="30px "+a,t.fillText("You have beaten every level! You are the best!",640,320),t.fillText("Press ENTER to restart",640,370),t.closePath()};class Pt{constructor(t){this.keyDown={},this.ctx=t,this.state=n.LOADING,this.frame=0,this.level=0,this.nextFrame=this.nextFrame.bind(this),this.handleKeydown=this.handleKeydown.bind(this),this.handleKeyup=this.handleKeyup.bind(this),this.requestId=requestAnimationFrame(this.nextFrame),document.addEventListener("keydown",this.handleKeydown),document.addEventListener("keyup",this.handleKeyup),document.fonts.ready.then(()=>{u(()=>this.state=n.TITLE)})}nextFrame(t){const e=this.time?(t-this.time)/(1e3/r):0;switch(this.time=t,this.frame+=e,this.state){case n.LOADING:nt(this.ctx,this.frame);break;case n.TITLE:tt(this.ctx,this.frame);break;case n.PAUSED:st(this.ctx,this.frame,this.game),lt(this.ctx,this.frame);break;case n.PLAYING:this.game.update(e,this.keyDown),st(this.ctx,this.frame,this.game),this.game.player.dead?(this.state=n.GAME_OVER,v(this.keyDown)):0===this.game.enemies.length&&(this.state=n.WIN,this.level++,v(this.keyDown));break;case n.GAME_OVER:st(this.ctx,this.frame,this.game),ct(this.ctx,this.frame);break;case n.WIN:st(this.ctx,this.frame,this.game),yt(this.ctx,this.frame,this.level<X,this.game)}this.requestId=requestAnimationFrame(this.nextFrame)}handleKeydown(t){if(!t.repeat&&!this.keyDown[t.keyCode])switch(t.keyCode){case g.ENTER:this.state===n.TITLE||this.state===n.GAME_OVER?(this.game=new q(this.level),this.state=n.PLAYING):this.state===n.WIN&&(this.level>=X&&(this.level=0),this.game=new q(this.level),this.state=n.PLAYING);break;case g.SPACE:break;case g.P:this.state===n.PLAYING?(this.state=n.PAUSED,this.game.setPlayerVelocity(p.STATIONARY.slice()),v(this.keyDown)):this.state===n.PAUSED&&(this.state=n.PLAYING);break;case g.Q:break;case g.UP:case g.DOWN:case g.LEFT:case g.RIGHT:case g.W:case g.A:case g.S:case g.D:this.state===n.PLAYING&&(this.keyDown[t.keyCode]=!0)}}handleKeyup(t){if(this.keyDown[t.keyCode])switch(t.keyCode){case g.UP:case g.DOWN:case g.LEFT:case g.RIGHT:case g.W:case g.A:case g.S:case g.D:this.state===n.PLAYING&&(this.keyDown[t.keyCode]=!1)}}}document.addEventListener("DOMContentLoaded",()=>{const t=document.querySelector("#aura-canvas");t.width=1280,t.height=720,new Pt(t.getContext("2d"))})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,